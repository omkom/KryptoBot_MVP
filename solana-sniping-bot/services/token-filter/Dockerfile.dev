# Development Dockerfile for token-filter service
ARG NODE_VERSION=18

FROM node:${NODE_VERSION}-alpine

# Set working directory
WORKDIR /usr/src/app

# Install development dependencies
RUN apk add --no-cache tzdata curl bash vim tini

# Create necessary directories
RUN mkdir -p ./shared ./service/src ./logs/errors ./logs/transactions

# Set environment variables
ENV SERVICE=token-filter \
    NODE_ENV=development \
    NODE_PATH=/usr/src/app \
    DEBUG=true

# Copy service package files
COPY ./services/token-filter/package*.json ./service/

# Copy shared package files
COPY ./shared/package*.json ./shared/

# Install nodemon for development
RUN npm install -g nodemon

# Install service dependencies with devDependencies
WORKDIR /usr/src/app/service
RUN npm install
WORKDIR /usr/src/app/shared
RUN npm install
WORKDIR /usr/src/app

# Create health check endpoint
RUN echo 'const http = require("http"); \
const server = http.createServer((req, res) => { \
  if (req.url === "/health") { \
    res.writeHead(200, {"Content-Type": "application/json"}); \
    res.end(JSON.stringify({status: "ok", service: "token-filter", mode: "development"})); \
  } else { \
    res.writeHead(404); res.end(); \
  } \
}); \
server.listen(3002, () => console.log("Health check running on :3002")); \
' > /usr/src/app/health.js

# Add nodemon config
COPY ./.nodemon.json /usr/src/app/

# Create convenient development scripts
RUN echo '#!/bin/sh\nnodemon --inspect=0.0.0.0:9229 --ignore node_modules/ -r dotenv/config health.js & nodemon --inspect=0.0.0.0:9229 --ignore node_modules/ -r dotenv/config service/src/index.js' > /usr/src/app/start-dev.sh && \
    chmod +x /usr/src/app/start-dev.sh

# Add npm scripts to package.json
RUN cd ./service && \
    npm pkg set scripts.dev="nodemon --inspect=0.0.0.0:9229 --ignore node_modules/ -r dotenv/config src/index.js" && \
    npm pkg set scripts.start-with-health="node -r dotenv/config /usr/src/app/health.js & node src/index.js"

# Expose debug and health check ports
EXPOSE 9229 3002

# Use tini as entrypoint for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Default command (overridden in docker compose.dev.yml)
CMD ["sh", "/usr/src/app/start-dev.sh"]